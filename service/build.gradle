/*
 *  Copyright (c) 2020, Michael Leitz
 *  <p/>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  <p/>
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  <p/>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Build docker file with jib: gradle jibDockerBuild
// Saving to Nexus here: https://github.com/GoogleContainerTools/jib/issues/531
// Saving to Nexus here: https://github.com/GoogleContainerTools/jib/issues/539

plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'io.freefair.lombok' version '5.1.1'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
    id 'com.google.cloud.tools.jib' version '2.5.1'
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

group = 'com.leadtechnologist'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.leadtechnologist'
            artifactId = 'licketyscript-service'
            version = "0.0.1-SNAPSHOT"
            from components.java

            pom {
                name = 'licketyscript-service'
                description = 'The Java service for lickety script application.'
            }
        }
    }

    repositories {
        maven {
            url "https://maven.pkg.jetbrains.space/leadtechnologist/p/lsc/leadtechnologist"
            credentials {
                username = "$System.env.JB_SPACE_CLIENT_ID"
                password = "$System.env.JB_SPACE_CLIENT_SECRET"
            }
        }
    }
}

jib {
    to {
        image = 'mikeleitz/lickety-script-service'
        credHelper = 'osxkeychain'
    }
    from {
        image = 'gcr.io/distroless/java:11'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    implementation 'org.antlr:ST4:4.3.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.11.2'
    implementation 'org.json:json:20200518'
    implementation 'commons-io:commons-io:2.7'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'com.github.marschall:memoryfilesystem:2.1.0'
    implementation 'org.apache.commons:commons-text:1.9'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

// Configure IntelliJ.
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
